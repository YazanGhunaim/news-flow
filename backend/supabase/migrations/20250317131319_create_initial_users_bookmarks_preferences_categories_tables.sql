create table "public"."bookmarked_articles" (
    "user_id" uuid not null default auth.uid(),
    "source" jsonb not null,
    "author" text,
    "title" text not null,
    "description" text not null,
    "url" text not null,
    "image_url" text,
    "date" date not null,
    "content" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."bookmarked_articles" enable row level security;

create table "public"."news_categories" (
    "category" text not null,
    "id" integer generated by default as identity not null
);


alter table "public"."news_categories" enable row level security;

create table "public"."user_preferences" (
    "user_id" uuid not null default auth.uid(),
    "created_at" timestamp with time zone not null default now(),
    "category_id" integer not null
);


alter table "public"."user_preferences" enable row level security;

create table "public"."users" (
    "id" uuid not null default auth.uid(),
    "name" text not null,
    "username" text not null,
    "email" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX "Users_email_key" ON public.users USING btree (email);

CREATE UNIQUE INDEX "Users_pkey" ON public.users USING btree (id);

CREATE UNIQUE INDEX "Users_username_key" ON public.users USING btree (username);

CREATE UNIQUE INDEX bookmarked_articles_pkey ON public.bookmarked_articles USING btree (user_id, url);

CREATE UNIQUE INDEX news_categories_category_key ON public.news_categories USING btree (category);

CREATE UNIQUE INDEX news_categories_pkey ON public.news_categories USING btree (id);

CREATE UNIQUE INDEX user_preferences_pkey ON public.user_preferences USING btree (user_id, category_id);

alter table "public"."bookmarked_articles" add constraint "bookmarked_articles_pkey" PRIMARY KEY using index "bookmarked_articles_pkey";

alter table "public"."news_categories" add constraint "news_categories_pkey" PRIMARY KEY using index "news_categories_pkey";

alter table "public"."user_preferences" add constraint "user_preferences_pkey" PRIMARY KEY using index "user_preferences_pkey";

alter table "public"."users" add constraint "Users_pkey" PRIMARY KEY using index "Users_pkey";

alter table "public"."bookmarked_articles" add constraint "bookmarked_articles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."bookmarked_articles" validate constraint "bookmarked_articles_user_id_fkey";

alter table "public"."news_categories" add constraint "news_categories_category_key" UNIQUE using index "news_categories_category_key";

alter table "public"."user_preferences" add constraint "user_preferences_category_id_fkey" FOREIGN KEY (category_id) REFERENCES news_categories(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_preferences" validate constraint "user_preferences_category_id_fkey";

alter table "public"."user_preferences" add constraint "user_preferences_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_preferences" validate constraint "user_preferences_user_id_fkey";

alter table "public"."users" add constraint "Users_email_key" UNIQUE using index "Users_email_key";

alter table "public"."users" add constraint "Users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "Users_id_fkey";

alter table "public"."users" add constraint "Users_username_key" UNIQUE using index "Users_username_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$begin
  insert into public.users (id, email, username, name)
  values
  (
    new.id,
    new.email,
    new.raw_user_meta_data->>'username',
    new.raw_user_meta_data->>'name'
   );
  return new;
end;$function$
;

grant delete on table "public"."bookmarked_articles" to "anon";

grant insert on table "public"."bookmarked_articles" to "anon";

grant references on table "public"."bookmarked_articles" to "anon";

grant select on table "public"."bookmarked_articles" to "anon";

grant trigger on table "public"."bookmarked_articles" to "anon";

grant truncate on table "public"."bookmarked_articles" to "anon";

grant update on table "public"."bookmarked_articles" to "anon";

grant delete on table "public"."bookmarked_articles" to "authenticated";

grant insert on table "public"."bookmarked_articles" to "authenticated";

grant references on table "public"."bookmarked_articles" to "authenticated";

grant select on table "public"."bookmarked_articles" to "authenticated";

grant trigger on table "public"."bookmarked_articles" to "authenticated";

grant truncate on table "public"."bookmarked_articles" to "authenticated";

grant update on table "public"."bookmarked_articles" to "authenticated";

grant delete on table "public"."bookmarked_articles" to "service_role";

grant insert on table "public"."bookmarked_articles" to "service_role";

grant references on table "public"."bookmarked_articles" to "service_role";

grant select on table "public"."bookmarked_articles" to "service_role";

grant trigger on table "public"."bookmarked_articles" to "service_role";

grant truncate on table "public"."bookmarked_articles" to "service_role";

grant update on table "public"."bookmarked_articles" to "service_role";

grant delete on table "public"."news_categories" to "anon";

grant insert on table "public"."news_categories" to "anon";

grant references on table "public"."news_categories" to "anon";

grant select on table "public"."news_categories" to "anon";

grant trigger on table "public"."news_categories" to "anon";

grant truncate on table "public"."news_categories" to "anon";

grant update on table "public"."news_categories" to "anon";

grant delete on table "public"."news_categories" to "authenticated";

grant insert on table "public"."news_categories" to "authenticated";

grant references on table "public"."news_categories" to "authenticated";

grant select on table "public"."news_categories" to "authenticated";

grant trigger on table "public"."news_categories" to "authenticated";

grant truncate on table "public"."news_categories" to "authenticated";

grant update on table "public"."news_categories" to "authenticated";

grant delete on table "public"."news_categories" to "service_role";

grant insert on table "public"."news_categories" to "service_role";

grant references on table "public"."news_categories" to "service_role";

grant select on table "public"."news_categories" to "service_role";

grant trigger on table "public"."news_categories" to "service_role";

grant truncate on table "public"."news_categories" to "service_role";

grant update on table "public"."news_categories" to "service_role";

grant delete on table "public"."user_preferences" to "anon";

grant insert on table "public"."user_preferences" to "anon";

grant references on table "public"."user_preferences" to "anon";

grant select on table "public"."user_preferences" to "anon";

grant trigger on table "public"."user_preferences" to "anon";

grant truncate on table "public"."user_preferences" to "anon";

grant update on table "public"."user_preferences" to "anon";

grant delete on table "public"."user_preferences" to "authenticated";

grant insert on table "public"."user_preferences" to "authenticated";

grant references on table "public"."user_preferences" to "authenticated";

grant select on table "public"."user_preferences" to "authenticated";

grant trigger on table "public"."user_preferences" to "authenticated";

grant truncate on table "public"."user_preferences" to "authenticated";

grant update on table "public"."user_preferences" to "authenticated";

grant delete on table "public"."user_preferences" to "service_role";

grant insert on table "public"."user_preferences" to "service_role";

grant references on table "public"."user_preferences" to "service_role";

grant select on table "public"."user_preferences" to "service_role";

grant trigger on table "public"."user_preferences" to "service_role";

grant truncate on table "public"."user_preferences" to "service_role";

grant update on table "public"."user_preferences" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."bookmarked_articles"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."bookmarked_articles"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."bookmarked_articles"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."news_categories"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."user_preferences"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."user_preferences"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."user_preferences"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable delete for users based on user_id"
on "public"."users"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = id));


create policy "Enable insert for users based on user_id"
on "public"."users"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = id));


create policy "Enable update for users based on email"
on "public"."users"
as permissive
for update
to public
using (((( SELECT auth.jwt() AS jwt) ->> 'email'::text) = email))
with check (((( SELECT auth.jwt() AS jwt) ->> 'email'::text) = email));


create policy "Enable users to view their own data only"
on "public"."users"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = id));



